// <auto-generated />
using System;
using DumpDrive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DumpDrive.Data.Migrations
{
    [DbContext(typeof(DumpDriveDbContext))]
    [Migration("20250101184657_AddNewModels")]
    partial class AddNewModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DFileId")
                        .HasColumnType("integer");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DFileId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Great resume!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(496),
                            FileId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Lovely!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(521),
                            FileId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Nice!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(526),
                            FileId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Content = "Cool!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(534),
                            FileId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Could be better.",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(539),
                            FileId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Beautiful!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(548),
                            FileId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            Content = "I dont like this song!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(555),
                            FileId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Content = "Amazing!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(561),
                            FileId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 9,
                            Content = "Excellent plan!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(568),
                            FileId = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Great presentation!",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(576),
                            FileId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            Content = "Nice.",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(583),
                            FileId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            Content = "Important archive data.",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(589),
                            FileId = 8,
                            UserId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "Data needs cleanup.",
                            CreatedAt = new DateTime(2025, 1, 1, 19, 46, 57, 83, DateTimeKind.Local).AddTicks(596),
                            FileId = 9,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.DFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Some content for resume.pdf",
                            FolderId = 1,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 79, DateTimeKind.Local).AddTicks(6995),
                            Name = "resume.pdf",
                            OwnerId = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            Content = "Image content for holiday.jpg",
                            FolderId = 2,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7353),
                            Name = "holiday.jpg",
                            OwnerId = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Audio content for song.mp3",
                            FolderId = 3,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7395),
                            Name = "song.mp3",
                            OwnerId = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            Content = "Video content for movie.mp4",
                            FolderId = 4,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7403),
                            Name = "movie.mp4",
                            OwnerId = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Document content for project_plan.docx",
                            FolderId = 5,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7408),
                            Name = "project_plan.docx",
                            OwnerId = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 6,
                            Content = "Presentation content for presentation.pptx",
                            FolderId = 5,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7427),
                            Name = "presentation.pptx",
                            OwnerId = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Report content for report.pdf",
                            FolderId = 6,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7431),
                            Name = "report.pdf",
                            OwnerId = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            Content = "Archive content for archive.zip",
                            FolderId = 7,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7434),
                            Name = "archive.zip",
                            OwnerId = 0,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            Content = "Data content for data.csv",
                            FolderId = 7,
                            LastModified = new DateTime(2025, 1, 1, 19, 46, 57, 82, DateTimeKind.Local).AddTicks(7438),
                            Name = "data.csv",
                            OwnerId = 0,
                            Status = 0
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Documents",
                            OwnerId = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Photos",
                            OwnerId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Music",
                            OwnerId = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Videos",
                            OwnerId = 4,
                            Status = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projects",
                            OwnerId = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Downloads",
                            OwnerId = 2,
                            Status = 1,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Archives",
                            OwnerId = 3,
                            Status = 0,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Itemtype")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("SharedWithUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SharedWithUserId");

                    b.ToTable("SharedItems");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DFileId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DFileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ana@gmail.com",
                            Name = "Ana",
                            Password = "pass12345",
                            Surname = "Anic"
                        },
                        new
                        {
                            Id = 2,
                            Email = "marko@gmail.com",
                            Name = "Marko",
                            Password = "pass54322",
                            Surname = "Markic"
                        },
                        new
                        {
                            Id = 3,
                            Email = "josip@gmail.com",
                            Name = "Josip",
                            Password = "qwert",
                            Surname = "Jopic"
                        },
                        new
                        {
                            Id = 4,
                            Email = "pero@gmail.com",
                            Name = "Pero",
                            Password = "pass7",
                            Surname = "Peric"
                        });
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Comment", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.DFile", null)
                        .WithMany("Comments")
                        .HasForeignKey("DFileId");

                    b.HasOne("DumpDrive.Data.Entities.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.DFile", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.User", "Owner")
                        .WithMany("Files")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.User", "Owner")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.Folder", null)
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.SharedItem", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DumpDrive.Data.Entities.Models.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("SharedWithUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("SharedWithUser");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.User", b =>
                {
                    b.HasOne("DumpDrive.Data.Entities.Models.DFile", null)
                        .WithMany("SharedWith")
                        .HasForeignKey("DFileId");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.DFile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("DumpDrive.Data.Entities.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("Folders");
                });
#pragma warning restore 612, 618
        }
    }
}
